#!/bin/bash

set -e
cd "$(dirname "$0")"

if ! command -v makepkg > /dev/null; then
  echo "This script requires makepkg on your PATH!"
  exit 1
fi

script_dir="$(realpath "$PWD")"
base_dir="$(realpath "${script_dir}/../")"
pkgbuilds_dir="${base_dir}/pkgbuilds"

echo "==> Reading packages"
pkgs=()
while IFS= read -r line; do
  if [[ "$line" != "#"* ]] && [[ -n "$line" ]]; then
    pkgs+=("$line")
  fi
done < "${pkgbuilds_dir}/packages.txt"

echo "==> Setting up build directory"
builddir="${pkgbuilds_dir}/build"
mkdir -p "$builddir"

echo "==> Building the packages"
for pkg in "${pkgs[@]}"; do
  (
    cd "${pkgbuilds_dir}/$pkg"

    echo "Attempting to build $pkg"
    echo "We are in: $(pwd)"
    echo "Which contains:"
    ls -la

    # Set up gpg

    echo "Setting up GPG"
    if [[ -e .SRCINFO ]] && grep -q "validpgpkeys" .SRCINFO; then
      echo "Adding keys from .SRCINFO:"
      grep "validpgpkeys" .SRCINFO
      awk '/validpgpkeys/ {print $3}' .SRCINFO | \
        xargs gpg --keyserver keyserver.ubuntu.com --recv-key
    fi

    if [[ -d "keys" ]]; then
      echo "Adding keys from ./keys/ folder:"
      ls -la ./keys/
      find ./keys/ -type f -name '*' -exec gpg --import {} \;
    fi

    # Build the package (and compress later to speed things up under emulation)
    echo "Now building packages"
    if PKGDEST="$builddir" PKGEXT='.pkg.tar' makepkg -si --noconfirm --nocheck; then
      echo "$pkg built successfully"
    else
      echo "::warning title=$pkg could not be built, see above logs for details"
    fi

    # Clean up the src and pkg directories to save space
    echo "Cleaning up src and pkg directories to save space"
    rm -rf src pkg
  )
done
